name: Build
description: Build on Linux via nix

inputs:
  target:
    default: "dissolve"
  cacheOnly:
    type: boolean
    default: false

runs:
  using: "composite"
  steps:

  - name: Free Space
    shell: bash
    run: |
      set -ex
      df -mh .
      sudo rm -rf /usr/share/dotnet
      sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      df -mh .

  - name: Install nix
    uses: "./.github/workflows/get-nix"
    with:
      target: ${{ inputs.target }}

  - name: Cache Nix Store
    uses: actions/cache@v4
    id: nix-cache
    with:
      path: /tmp/nixcache
      key: ${{ runner.os }}-${{ env.nixHash }}-nix-cache

  - name: Import Nix Store Cache
    if: "steps.nix-cache.outputs.cache-hit == 'true'"
    shell: bash
    run: |
      nix-store --import < /tmp/nixcache
      sudo rm -rf /tmp/nixcache

  - name: Build
    shell: bash
    run: |
      set -ex

      ### Begin unholy hack
      ###
      ### For reasons unknown, when nix is run under GitHub actions,
      ### it ignores the submodules flag, meaning that flakes with
      ### submodules cannot be built
      ###
      ### As a blasphemous workaround, I've added a step to bring the
      ### submodule into the main repo.  Hopefully, submodules are
      ### made the default flake behaviour in the upcoming release,
      ### this will no longer be necessary.  If not, we might have to
      ### make the submodule an extra input to the flake, but that
      ### will take some extra time.
      ###
      ### If you are reading this comment in 2026, try removing this
      ### entire hack and see if the problem fixed itself.  You may
      ### also need to update the action that installs nix in the
      ### first place.  If that doesn't solve the problem, then we
      ### should go ahead and just make the submodule a flake input.

      git submodule update --init --recursive
      git config --global user.email "no_one@example.com"
      git config --global user.name "GitHub Actions"
      git rm .gitmodules

      cp -r QuickPlot QuickPlot.bak
      rm -rf QuickPlot.bak/.git
      git rm -r QuickPlot
      git commit -m "Kill submodule"

      mv QuickPlot.bak QuickPlot
      git add QuickPlot
      git commit -m "Resurrect submodule"

      ### End unholy hack

      # Build Singularity target
      target=${{ inputs.target }}
      singularityTarget=${target/dissolve/singularity}
      nix build -L ".?submodules=1#$singularityTarget"

      # Assemble artifacts
      mkdir packages-sif
      cp -v result packages-sif/${{ inputs.target }}-${{ env.dissolveVersion }}.sif

  - name: Bundle Executable
    shell: bash
    run: |
      set -ex

      nix bundle -L .#${{ inputs.target }} -o binary

      # Assemble artifacts
      mkdir packages-binary
      cp -v binary packages-binary/${{ inputs.target }}-${{ env.dissolveVersion }}

  - name: Tidy nix Store
    if: ${{ inputs.cacheOnly == 'true' }}
    shell: bash
    run: |
      set -ex
      # Remove the built dissolve derivations / img from the nix store to save space and leave just the other core build deps
      # Need to do this via sudo so we can use --ignore-liveness
      nixStoreCmd=`which nix-store`
      targets=`nix path-info --all | grep dissolve`
      echo "for a in \"$targets\"; do $nixStoreCmd -q --referrers-closure \$a | xargs $nixStoreCmd --delete --ignore-liveness $b; done" | sudo bash

  - name: Export Nix Store Cache
    if: ${{ inputs.cacheOnly == 'true' }}
    shell: bash
    run: nix-store --export $(find /nix/store -maxdepth 1 -name '*-*') > /tmp/nixcache

  - name: Upload Package Artifacts (Binary)
    if: ${{ inputs.cacheOnly == 'false' }}
    uses: actions/upload-artifact@v4
    with:
      name: packages-nix-${{ inputs.target }}-binary
      path: ${{ github.workspace }}/packages-binary

  - name: Upload Package Artifacts (sif)
    if: ${{ inputs.cacheOnly == 'false' }}
    uses: actions/upload-artifact@v4
    with:
      name: packages-nix-${{ inputs.target }}-sif
      path: ${{ github.workspace }}/packages-sif
