name: Build
description: Build on OSX

inputs:
  threading:
    default: true
  antlrVersion:
    default: "4.13.1"
  ftglVersion:
    default: "2.1.3-rc5"
  extraCMakeFlags:
    default: ""
  cacheOnly:
    type: boolean
    default: false

runs:
  using: "composite"
  steps:

  #
  # Setup / Install Dependencies
  #

  - name: Setup Python
    uses: actions/setup-python@v4
    with:
      python-version: ${{ env.pythonVersion }}

  - name: Install Homebrew Dependencies
    if: ${{ inputs.cacheOnly }}
    shell: bash
    run: |
      set -ex
      brew update-reset
      brew install ninja
      PACKAGES=(libpng freetype ftgl antlr)
      for PACKAGE in "${PACKAGES[@]}"
      do
        brew fetch --force --bottle-tag=arm64_monterey $PACKAGE
        brew install $(brew --cache --bottle-tag=arm64_monterey $PACKAGE)
      done
      
  - name: Install Python Dependencies
    shell: bash
    run: |
      pip3 install --user aqtinstall conan==1.58.0

  - name: Retrieve Qt Cache
    id: cache-qt
    uses: actions/cache@v3
    with:
      key: osx-qt-${{ env.qtVersion }}
      path: ${{ runner.temp }}/qt

  - name: Install Qt
    if: ${{ steps.cache-qt.outputs.cache-hit != 'true' }}
    shell: bash
    run: |
      export PATH="$(python3 -m site --user-base)/bin:$PATH"
      aqt install-qt --outputdir ${{ runner.temp }}/qt mac desktop ${{ env.qtVersion }}

  #
  # Main Build
  #

  - name: Install Conan Dependencies
    shell: bash
    run: |
      set -ex

      # Setup paths
      export PATH="$(python3 -m site --user-base)/bin:$PATH"

      mkdir build && cd build
      conan config set storage.download_cache="${GITHUB_WORKSPACE}/.conancache"
      conan install .. --build missing -s arch=armv8

  - name: Build
    if: ${{ inputs.cacheOnly == 'false' }}
    shell: bash
    run: |
      set -ex

      # Setup paths
      # Must specify correct arm64 libs
      export PATH="$(python3 -m site --user-base)/bin:$PATH"
      Qt6_DIR=${{ runner.temp }}/qt/${{ env.qtVersion }}/macos/lib/cmake/Qt6
      QT_BASE_DIR=${{ runner.temp }}/qt/${{ env.qtVersion }}/macos
      ANTLR_EXE=$(brew --prefix antlr)/antlr-${{ inputs.antlrVersion }}-complete.jar
      FTGL_INCLUDE_DIRS=$(brew --prefix ftgl)/include/
      FTGL_LIBRARIES=$(brew --prefix ftgl)/lib/libftgl.2.dylib

      CMAKE_PARAMS=(
        -DGUI:bool=true
        -DMULTI_THREADING:bool=${{ inputs.threading }}
        -DJava_JAVA_EXECUTABLE:path=$JAVA_HOME_21_X64/bin/java
        -DANTLR_EXECUTABLE:string=$ANTLR_EXE
        -DFTGL_INCLUDE_DIRS:path=$FTGL_INCLUDE_DIRS
        -DFTGL_LIBRARIES:path=$FTGL_LIBRARIES
        -DCMAKE_OSX_ARCHITECTURES:string="arm64"
        -DQT_BASE_DIR=$QT_BASE_DIR
      )

      echo "Detected ANTLR exe as [$ANTLR_EXE]"
      echo "JAVA HOME: $JAVA_HOME_21_X64"

      # Build
      cd build
      cmake -G Ninja "${CMAKE_PARAMS[@]}" ${{ inputs.extraCMakeFlags }}  ../
      cmake --build . --config Release

      # Fix ftgl link path
      install_name_tool -change /usr/local/opt/ftgl/lib/libftgl.2.dylib @rpath/libftgl.2.dylib bin/dissolve-gui.app/Contents/MacOS/dissolve-gui

      cd ../

      # Deploy Conan dependencies for ease
      mkdir deploy && cd deploy
      conan install .. -g deploy -s arch=armv8

      # Copy over ftgl so it can be shipped with the bundle
      mkdir ftgl
      cp $(brew --prefix ftgl)/lib/libftgl.2.dylib ftgl
      cp $(brew --prefix ftgl)/lib/libftgl.2.1.3.dylib ftgl

  - name: Upload Raw Build Artifacts
    if: ${{ inputs.cacheOnly == 'false' }}
    uses: actions/upload-artifact@v3
    with:
      name: osx-build-artifacts-silicon
      path: |
        ${{ github.workspace }}/build
        ${{ github.workspace }}/deploy
      retention-days: 1
