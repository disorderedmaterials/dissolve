name: Build
description: Build on OSX with Apple Silicon chips

inputs:
  threading:
    default: true
  extraCMakeFlags:
    default: ""
  cacheOnly:
    type: boolean
    default: false

runs:
  using: "composite"
  steps:

  #
  # Setup / Install Dependencies
  #

  - name: Setup Python
    uses: actions/setup-python@v4
    with:
      python-version: ${{ env.pythonVersion }}

  - name: Install Homebrew Dependencies
    if: ${{ inputs.cacheOnly == 'false' }}
    shell: bash
    run: |
      set -ex
      brew update-reset
      brew install cli11 openjdk qt@6 ftgl ninja

  - name: Acquire ANTLR Java
    if: ${{ inputs.cacheOnly == 'false' }}
    shell: bash
    run: |
      set -ex
      sudo mkdir -p /usr/local/Cellar/antlr/4.9.3
      sudo curl https://raw.githubusercontent.com/antlr/website-antlr4/gh-pages/download/antlr-4.9.3-complete.jar --output /usr/local/Cellar/antlr/4.9.3/antlr-4.9.3-complete.jar
  
  - name: Acquire & Build ANTLR Cpp Runtime
    if: ${{ inputs.cacheOnly == 'false' }}
    shell: bash
    run: |
      git clone -b 4.9.3 --single-branch https://github.com/antlr/antlr4.git
      cd antlr4/runtime/Cpp
      mkdir build && mkdir run && cd build
      cmake .. -DANTLR_JAR_LOCATION=/usr/local/Cellar/antlr/4.9.3/antlr-4.9.3-complete.jar -DCMAKE_OSX_ARCHITECTURES:string="arm64" -DWITH_DEMO:bool=true -DJava_JAVA_EXECUTABLE:path=/usr/local/Cellar/openjdk/21.0.1/bin/java
      make
      DESTDIR=../run make install

      sudo mkdir -p /usr/local/Cellar/antlr4-cppruntime/4.9.3
      sudo cp -r ~/antlr4/runtime/Cpp/run/usr/local/ /usr/local/Cellar/antlr4-cppruntime/4.9.3
      sudo cp -r ~/antlr4/runtime/Cpp/run/usr/local/lib/ /usr/local/lib
      sudo cp -r ~/antlr4/runtime/Cpp/run/usr/local/include/antlr4-runtime /usr/local/include
      cd ../../../

  - name: Acquire & Build TBB
    if: ${{ inputs.cacheOnly == 'false' }}
    shell: bash
    run: |
      git clone --depth 1 --branch v2020.3 https://github.com/oneapi-src/oneTBB.git
      cd oneTBB
      rm build/macos.inc
      curl -o build/macos.inc https://raw.githubusercontent.com/nicokist/math/4f8a8d5cdb4d78ac830383866890ccf840d74803/lib/tbb_2019_U8/build/macos.inc
      make
      sudo cp build/macos_arm64_clang_cc14.0.3_os13.4_release/libtbb.dylib build/macos_arm64_clang_cc14.0.3_os13.4_release/libtbbmalloc_proxy.dylib build/macos_arm64_clang_cc14.0.3_os13.4_release/libtbbmalloc.dylib /usr/local/lib
      cd ..

  - name: Install Python Dependencies
    shell: bash
    run: |
      pip3 install --user aqtinstall conan==1.61.0

  - name: Retrieve Qt Cache
    id: cache-qt
    uses: actions/cache@v3
    with:
      key: osx-qt-${{ env.qtVersion }}
      path: ${{ runner.temp }}/qt

  - name: Install Qt
    if: ${{ steps.cache-qt.outputs.cache-hit != 'true' }}
    shell: bash
    run: |
      export PATH="$(python3 -m site --user-base)/bin:$PATH"
      aqt install-qt --outputdir ${{ runner.temp }}/qt mac desktop ${{ env.qtVersion }}

  #
  # Main Build
  #

  - name: Retrieve Conan Cache
    id: cache-conan
    uses: actions/cache@v3
    with:
      key: osx-conan-${{ env.conanHash }}
      path: |
        ~/.conan
        ~/.conancache

  - name: Install Conan Dependencies
    shell: bash
    run: |
      set -ex

      # Setup paths
      export PATH="$(python3 -m site --user-base)/bin:$PATH"

      mkdir build && cd build
      conan config set storage.download_cache="${GITHUB_WORKSPACE}/.conancache"
      conan install .. --build=missing -s arch=armv8

  - name: Build
    if: ${{ inputs.cacheOnly == 'false' }}
    shell: bash
    run: |
      set -ex

      # Setup paths
      export PATH="$(python3 -m site --user-base)/bin:$PATH"
      Qt6_DIR=${{ runner.temp }}/qt/${{ env.qtVersion }}/macos/lib/cmake/Qt6
      QT_BASE_DIR=${{ runner.temp }}/qt/${{ env.qtVersion }}/macos
      ANTLR_EXE=/usr/local/Cellar/antlr/4.9.3/antlr-4.9.3-complete.jar
      echo "Detected ANTLR exe as [$ANTLR_EXE]"

      # Build
      cd build
      cmake -G Ninja -DGUI:bool=true -DMULTI_THREADING:bool=${{ inputs.threading }} -DANTLR_EXECUTABLE:string=$ANTLR_EXE ${{ inputs.extraCMakeFlags }} -DQT_BASE_DIR=$QT_BASE_DIR  -DCMAKE_OSX_ARCHITECTURES:string="arm64" ../
      cmake --build . --config Release
      cd ../

      install_name_tool -add_rpath /usr/local/lib pwd/build/bin/dissolve-gui.app/Contents/MacOS/dissolve-gui

      # Deploy Conan dependencies for ease
      mkdir deploy && cd deploy
      conan install .. -g deploy

  - name: Upload Raw Build Artifacts
    if: ${{ inputs.cacheOnly == 'false' }}
    uses: actions/upload-artifact@v3
    with:
      name: osx-build-artifacts
      path: |
        ${{ github.workspace }}/build
        ${{ github.workspace }}/deploy
      retention-days: 1
