// SPDX-License-Identifier: GPL-3.0-or-later
// Copyright (c) 2021 Team Dissolve and contributors

#include "gui/datamanagerdialog.h"
#include "gui/gui.h"
#include "main/dissolve.h"
#include <QFileDialog>
#include <QInputDialog>
#include <QMessageBox>

void DissolveWindow::setupIteration(int count)
{
    // Prepare the simulation
    if (!dissolve_.prepare())
        return;

    // Ensure that the simulation can run
    if (dissolve_.inputFilename().empty())
    {
        QMessageBox::warning(this, "No Input File", "You must save the file before running the simulation");
        return;
    }

    // Prepare the GUI
    disableSensitiveControls();
    Renderable::setSourceDataAccessEnabled(false);
    dissolveState_ = DissolveWindow::RunningState;

    // Update the controls
    updateControlsFrame();

    emit iterate(count);
}

void DissolveWindow::on_SimulationRunAction_triggered(bool checked) { setupIteration(-1); }

void DissolveWindow::on_SimulationRunForAction_triggered(bool checked)
{
    // Get the number of iterations to run
    bool ok;
    int nIterations =
        QInputDialog::getInt(this, "Iterate Simulation...", "Enter the number of iterations to run", 10, 1, 1000000, 10, &ok);
    if (!ok)
        return;
    setupIteration(nIterations);
}

void DissolveWindow::on_SimulationStepAction_triggered(bool checked) { setupIteration(1); }

void DissolveWindow::on_SimulationStepFiveAction_triggered(bool checked) { setupIteration(5); }

void DissolveWindow::on_SimulationPauseAction_triggered(bool checked)
{
    // Set run icon button to the 'pausing' icon (it will be set back to normal by setWidgetsAfterRun())
    ui_.ControlRunButton->setIcon(QIcon(":/control/icons/control_waiting.svg"));

    // Send the signal to stop
    emit(stopIterating());

    // Disable the pause button
    ui_.ControlPauseButton->setEnabled(false);
    Renderable::setSourceDataAccessEnabled(true);
}

void DissolveWindow::on_SimulationSaveRestartPointAction_triggered(bool checked)
{
    // Get filename for restart point
    QString filename =
        QFileDialog::getSaveFileName(this, "Select Output File", QDir::currentPath(), "Restart Files (*.restart)");
    if (filename.isEmpty())
        return;

    if (dissolve_.saveRestart(qPrintable(filename)))
        Messenger::print("Saved restart point to '{}'.\n", qPrintable(filename));
    else
        Messenger::error("Failed to save restart point to '{}'.\n", qPrintable(filename));
}

void DissolveWindow::on_SimulationDataManagerAction_triggered(bool checked)
{
    DataManagerDialog dataManagerDialog(this, dissolve_, referencePoints_, dissolve_.processingModuleData());
    dataManagerDialog.exec();
}

void DissolveWindow::on_SimulationClearModuleDataAction_triggered(bool checked)
{
    QMessageBox queryBox;
    queryBox.setText("This will delete all data generated by modules, and reset the iteration counter to zero. "
                     "Configuration contents will remain as-is.");
    queryBox.setInformativeText("This cannot be undone. Proceed?");
    queryBox.setStandardButtons(QMessageBox::Yes | QMessageBox::No);
    queryBox.setDefaultButton(QMessageBox::No);
    auto ret = queryBox.exec();

    if (ret == QMessageBox::Yes)
    {
        // Invalidate all renderables before we clear the data
        Renderable::invalidateAll();

        // Clear main processing data
        dissolve_.processingModuleData().clear();

        // Set iteration counter to zero
        dissolve_.resetIterationCounter();

        // Regenerate pair potentials
        dissolve_.regeneratePairPotentials();

        fullUpdate();
    }
}

void DissolveWindow::on_SimulationSetRandomSeedAction_triggered(bool checked)
{
    // Create an input dialog to get the new seed
    bool ok;
    dissolve_.seed();
    int newSeed =
        QInputDialog::getInt(this, "Set random seed", "Enter the new value of the random seed, or -1 to remove set value",
                             dissolve_.seed(), -1, 2147483647, 1, &ok);

    if (!ok)
        return;

    // Set and initialise random seed
    dissolve_.setSeed(newSeed);

    if (dissolve_.seed() == -1)
        srand((unsigned)time(nullptr));
    else
        srand(dissolve_.seed());
}
