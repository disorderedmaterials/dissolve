// SPDX-License-Identifier: GPL-3.0-or-later
// Copyright (c) 2023 Team Dissolve and contributors

#pragma once

#include "gui/render/renderablespecies.h"
#include "gui/render/renderablespeciessite.h"
#include "gui/viewer.hui"

// Forward Declarations
class Element;
class Species;
class SpeciesAtom;

// Site Rendering Widget
class SiteViewer : public BaseViewer
{
    Q_OBJECT

    public:
    SiteViewer(QWidget *parent);
    ~SiteViewer() = default;

    /*
     * Rendering (BaseViewer virtuals)
     */
    private:
    // Perform post-initialisation operations
    void postInitialiseGL() override;
    // Perform post-resize operations
    void postResizeGL() override;
    // Render 2D overlay content
    void render2DOverlay() override;

    /*
     * Mouse / Keyboard Input (BaseViewer virtuals)
     */
    protected:
    // Mouse moved
    void mouseMoved(int dx, int dy) override;

    /*
     * Interaction (BaseViewer virtuals)
     */
    public:
    // Interaction Mode enum
    enum class InteractionMode
    {
        Select,
        SelectArea,
        nInteractionModes
    };
    // Secondary Interaction Mode enum
    enum class TransientInteractionMode
    {
        None,
        TranslateView,
        RotateView
    };

    private:
    // Primary interaction mode (left mouse button)
    InteractionMode interactionMode_;
    // Transient interaction mode (i.e. one not invoked by primary button)
    TransientInteractionMode transientInteractionMode_;
    // Clicked atom at the start of the interaction (if any)
    std::optional<int> clickedAtomIndex_;

    private:
    // Return atom index at specified coordinates
    std::optional<int> atomIndexAt(int x, int y);

    protected:
    // Start interaction at the specified screen coordinates
    void startInteraction() override;
    // End interaction at the specified screen coordinates
    void endInteraction() override;
    // Cancel current interaction
    void cancelInteraction() override;

    public:
    // Set current interaction mode
    void setInteractionMode(InteractionMode mode);
    // Return current interaction mode
    InteractionMode interactionMode() const;
    // Return text describing current interaction mode
    const QString interactionModeText() const override;

    /*
     * Source Species and Site
     */
    private:
    // Source SpeciesSite to display
    SpeciesSite *site_;
    // Parent Species for displayed site
    Species *species_;

    public:
    // Set target Species
    void setSpecies(Species *sp);
    // Return parent Species for site
    Species *species() const;
    // Set target SpeciesSite
    void setSite(SpeciesSite *site);
    // Return target SpeciesSite
    SpeciesSite *speciesSite() const;

    /*
     * Renderables
     */
    private:
    // Renderable for parent Species of Site
    std::shared_ptr<RenderableSpecies> speciesRenderable_;
    // Renderable for displayed site
    std::shared_ptr<RenderableSpeciesSite> siteRenderable_;

    public:
    // Set Species renderable draw style
    void setSpeciesRenderableDrawStyle(RenderableSpecies::SpeciesDisplayStyle ds);
    // Return current Species renderable draw style
    RenderableSpecies::SpeciesDisplayStyle speciesRenderableDrawStyle() const;
    // Recreate selection primitive
    void recreateSelectionPrimitive();

    /*
     * Signals
     */
    signals:
    // Atom selection changed
    void atomsChanged();
};
