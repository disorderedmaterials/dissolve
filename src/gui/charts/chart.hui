// SPDX-License-Identifier: GPL-3.0-or-later
// Copyright (c) 2021 Team Dissolve and contributors

#pragma once

#include "gui/charts/chartblock.h"
#include "gui/charts/charthotspot.h"
#include "gui/widgets/mimestrings.h"
#include "templates/list.h"
#include "templates/reflist.h"
#include <QWidget>

// Forward Declarations
class LineParser;
class QDragEnterEvent;
class QDragLeaveEvent;
class QDropEvent;
class QMouseEvent;

// Chart - Display blocks according to some layout (determined by the derived class)
class ChartBase : public QWidget
{
    Q_OBJECT

    public:
    ChartBase(QWidget *parent = nullptr);
    ~ChartBase();

    /*
     * Chart Blocks
     */
    protected:
    // RefList of ChartBlocks present in the widget
    RefList<ChartBlock> chartBlocks_;

    protected:
    // Update the content block widgets against the current target data
    virtual void updateContentBlocks() = 0;
    // Return if a ChartBlock can be dragged from the supplied position
    ChartBlock *dragBlockAt(QPoint point);

    /*
     * Update
     */
    protected:
    // Whether widget is currently refreshing
    bool refreshing_;

    public:
    // Update controls within widget
    void updateControls();
    // Disable sensitive controls within widget
    void disableSensitiveControls();
    // Enable sensitive controls within widget
    void enableSensitiveControls();

    /*
     * QWidget Reimplementations
     */
    protected:
    // Geometry changed
    void resizeEvent(QResizeEvent *event);
    // Size hint
    QSize sizeHint() const;
    // Minimum size hint
    QSize minimumSizeHint() const;
    // Mouse press event
    void mousePressEvent(QMouseEvent *event);
    // Mouse move event
    void mouseMoveEvent(QMouseEvent *event);
    // Mouse release event
    void mouseReleaseEvent(QMouseEvent *event);
    // Mouse double-click event
    void mouseDoubleClickEvent(QMouseEvent *event);
    // Drag enter event
    void dragEnterEvent(QDragEnterEvent *event);
    // Draw move event
    void dragMoveEvent(QDragMoveEvent *event);
    // Drag leave event
    void dragLeaveEvent(QDragLeaveEvent *event);
    // Drop event
    void dropEvent(QDropEvent *event);

    /*
     * Block Interaction
     */
    protected:
    // Position of last mouse click
    QPoint mouseDownPosition_;
    // ChartBlock being dragged (if a local drag)
    ChartBlock *draggedBlock_;
    // Selected ChartBlock
    ChartBlock *selectedBlock_;
    // Drop hotspots available on the chart
    List<ChartHotSpot> hotSpots_;
    // Current hotspot the dragged object is over (if any)
    ChartHotSpot *currentHotSpot_;

    private:
    // Return hotspot under specified point
    ChartHotSpot *hotSpotAt(QPoint point);
    // Reset after drop
    void resetAfterDrop(bool animateWidgets = true);

    protected:
    // Return whether to accept the dragged object (described by its mime info)
    virtual bool acceptDraggedObject(const MimeStrings *strings);
    // Handle hover over specified hotspot
    virtual bool handleHotSpotHover(const ChartHotSpot *hotSpot);
    // Handle the drop of an object (described by its mime info)
    virtual void handleDroppedObject(const MimeStrings *strings);
    // Return mime info for specified block (owned by this chart)
    virtual MimeStrings mimeInfo(ChartBlock *block);
    // Specified block has been double clicked
    virtual void blockDoubleClicked(ChartBlock *block);
    // Block selection has changed
    virtual void blockSelectionChanged(ChartBlock *block);

    protected slots:
    // The chart has requested removal of one of its blocks
    virtual void blockRemovalRequested(const QString &blockIdentifier);

    public:
    // Return selected ChartBlock
    ChartBlock *selectedBlock() const;

    signals:
    void blockDoubleClicked(const QString &blockIdentifeir);
    void blockRemoved(const QString &blockIdentifier);
    void blockSelectionChanged(const QString &blockIdentifier);

    /*
     * Widget Layout
     */
    private:
    // Size hint for current number of columns / rows
    QSize sizeHint_;
    // Minimum size hint (for single column)
    QSize minimumSizeHint_;

    private:
    // Lay out widgets
    void layOutWidgets(bool animate = false);
    // Calculate new widget geometry according to the layout requirements, returning the entire area required
    virtual QSize calculateNewWidgetGeometry(QSize currentSize) = 0;

    protected:
    // Whether to resize chart to accommodate widgets
    bool resizeToWidgets_;

    public slots:
    // Recalculate layout (after widget size change etc.)
    void recalculateLayout();

    /*
     * Signals / Slots
     */
    protected slots:
    // Displayed chart data has been modified in some way
    void chartDataModified();

    signals:
    // Notify that the underlying data displayed by the chart has changed
    void dataModified();
    // Notify that the underlying data has changed, and the GUI should be updated in full
    void fullUpdate();
    // Notify that our required size has changed
    void requiredSizeChanged();
};
