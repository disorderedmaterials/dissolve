/*
    *** ComboList Delegate
    *** src/gui/delegates/combolist.hui
    Copyright T. Youngs 2012-2012

    This file is part of Dissolve.

    Dissolve is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Dissolve is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Dissolve.  If not, see <http://www.gnu.org/licenses/>.
*/

#pragma once

#include "base/enumoptions.h"
#include "templates/list.h"
#include <QComboBox>
#include <QModelIndex>
#include <QObject>
#include <QtWidgets/QItemDelegate>
#include <memory>
#include <vector>

// Base class for source List
class ComboListItems
{
    public:
    // Constructor
    ComboListItems();
    // Destructor
    virtual ~ComboListItems();

    /*
     * Access
     */
    public:
    // Return number of items in list
    virtual int nItems() = 0;
    // Restart list iteration
    virtual void restartIterator() = 0;
    // Move to next item in list
    virtual bool nextItem() = 0;
    // Return text entry for nth item
    virtual QString currentItemText() = 0;
};

// Templated Item Source for ComboList (utilising T's name())
template <class T> class ComboNameListItems : public ComboListItems
{
    public:
    // Constructor
    ComboNameListItems(const List<T> &items) : items_(items), iterator_(items) {}

    private:
    // Associated item list
    const List<T> &items_;
    // List iterator
    ListIterator<T> iterator_;
    // Current iteration item
    T *currentItem_;

    /*
     * Access
     */
    public:
    // Return number of items in list
    int nItems() { return items_.nItems(); }
    // Restart list iteration
    void restartIterator() { iterator_.restart(); }
    // Move to next item in list
    bool nextItem()
    {
        currentItem_ = iterator_.iterate();
        return currentItem_;
    }
    // Return text entry for nth item
    QString currentItemText() { return (currentItem_ ? QString::fromStdString(std::string(currentItem_->name())) : "NULL"); }
};

// Templated Item Source for ComboList (utilising T's name())
template <class T> class ComboSharedNameListItems : public ComboListItems
{
    public:
    // Constructor
    ComboSharedNameListItems(const std::vector<std::shared_ptr<T>> &items) : items_(items), currentItem_(items.cbegin()) {}

    private:
    // Associated item list
    const std::vector<std::shared_ptr<T>> &items_;
    // Current iteration item
    typename std::vector<std::shared_ptr<T>>::const_iterator currentItem_;

    /*
     * Access
     */
    public:
    // Return number of items in list
    int nItems() { return items_.size(); }
    // Restart list iteration
    void restartIterator() { currentItem_ = items_.cbegin(); }
    // Move to next item in list
    bool nextItem()
    {
        ++currentItem_;
        return currentItem_ < items_.cend();
    }
    // Return text entry for nth item
    QString currentItemText()
    {
        return (*currentItem_ ? QString::fromStdString(std::string((*currentItem_)->name())) : "NULL");
    }
};

// Templated EnumOptions Source for ComboList
template <class E> class ComboEnumOptionsItems : public ComboListItems
{
    public:
    // Constructor
    ComboEnumOptionsItems(EnumOptions<E> enumOptions) : items_(enumOptions) { currentItemIndex_ = 0; }

    private:
    // Associated item list
    const EnumOptions<E> items_;
    // Current iterator index
    int currentItemIndex_;

    /*
     * Access
     */
    public:
    // Return number of items in list
    int nItems() { return items_.nOptions(); }
    // Restart list iteration
    void restartIterator() { currentItemIndex_ = -1; }
    // Move to next item in list
    bool nextItem()
    {
        ++currentItemIndex_;
        return (currentItemIndex_ < nItems());
    }
    // Return text entry for nth item
    QString currentItemText()
    {
        return (currentItemIndex_ < nItems() ? QString::fromStdString(std::string(items_.keywordByIndex(currentItemIndex_)))
                                             : "NULL");
    }
};

// Delegate class, providing list of name()s in a QComboBox
class ComboListDelegate : public QItemDelegate
{
    Q_OBJECT

    public:
    // Constructor
    ComboListDelegate(QObject *parent, ComboListItems *items, bool allowNewItems = false);
    // Destructor
    virtual ~ComboListDelegate();

    /*
     * Data
     */
    private:
    // Associated item list
    ComboListItems *items_;
    // Parameters for editor
    bool allowNewItems_;

    /*
     * QItemDelegate Virtuals
     */
    private:
    // Create editing widget
    QWidget *createEditor(QWidget *parent, const QStyleOptionViewItem &option, const QModelIndex &index) const;
    // Set the data to appear when the editor is called
    void setEditorData(QWidget *editor, const QModelIndex &index) const;
    // Extract data from editor, and place back into source model
    void setModelData(QWidget *editor, QAbstractItemModel *model, const QModelIndex &index) const;
    // Resize editor
    void updateEditorGeometry(QWidget *editor, const QStyleOptionViewItem &option, const QModelIndex &index) const;

    /*
     * Signals / Slots
     */
    private slots:
    // Index changed in combo box
    void comboIndexChanged(int index);
};
