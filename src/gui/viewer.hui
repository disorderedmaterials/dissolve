/*
    *** Base Viewer Widget (subclassing QOpenGLWidget)
    *** src/gui/viewer.hui
    Copyright T. Youngs 2013-2020

    This file is part of Dissolve.

    Dissolve is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Dissolve is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Dissolve.  If not, see <http://www.gnu.org/licenses/>.
*/

#pragma once

#include "base/enumoptions.h"
#include "base/timer.h"
#include "gui/render/fontinstance.h"
#include "gui/render/primitive.h"
#include "gui/render/renderable.h"
#include "gui/render/renderablegroupmanager.h"
#include "gui/render/view.h"
#include "math/data1d.h"
#include "templates/list.h"
#include "templates/reflist.h"
#include <QMenu>
#include <QObject>
#include <QOffscreenSurface>
#include <QOpenGLFunctions>
#include <QOpenGLWidget>
#include <QTimer>
#include <vector>

// Forward Declarations
class QOpenGLFramebufferObject;

// Base rendering widget
class BaseViewer : public QOpenGLWidget, protected QOpenGLFunctions
{
    Q_OBJECT

    public:
    // Constructor / Destructor
    BaseViewer(QWidget *parent);
    ~BaseViewer();

    /*
     * View
     */
    protected:
    // View for renderable data
    View view_;
    // Viewer to which this view is linked (is dependent on for its view)
    BaseViewer *linkedViewer_;
    // List of other viewers that are dependent on (i.e. are linked to) this one
    RefList<BaseViewer> dependentViewers_;

    private:
    // Register that the specified viewer depends on (links to) this one
    void addDependentViewer(BaseViewer *viewer);
    // Unregister the specified viewer
    void removeDependentViewer(BaseViewer *viewer);

    public:
    // Return the View definition
    View &view();
    // Return the View definition (const)
    const View &constView() const;
    // Link this viewer to the one specified
    void linkView(BaseViewer *viewToLinkTo);
    // Unlink this viewer from the one specified
    void unlinkView();

    /*
     * Renderable Data
     */
    protected:
    // List of renderables to display
    List<Renderable> renderables_;

    public:
    // Clear existing data
    void clear();
    // Own supplied Renderable and display it
    void ownRenderable(Renderable *newRenderable);
    // Create Renderable by type and object identifier
    Renderable *createRenderable(Renderable::RenderableType type, std::string_view objectTag, std::string_view name,
                                 std::string_view groupName = "");
    // Remove existing Renderable
    void removeRenderable(Renderable *data);
    // Clear all Renderables
    void clearRenderables();
    // Return number of Renderables
    int nRenderables() const;
    // Return list of Renderables
    const List<Renderable> &renderables() const;
    // Return named Renderable
    Renderable *renderable(std::string_view name) const;
    // Return Renderable with specified objectTag (if it exists)
    Renderable *renderableWithTag(std::string_view objectTag) const;
    // Set visibility of named Renderable
    void setRenderableVisible(std::string_view name, bool visible);
    // Return visibility of named Renderable
    bool isRenderableVisible(std::string_view name) const;
    // Emit the signal to notify that the viewing style of data represented in the Viewer has changed
    void notifyStyleModified();
    // Emit the signal to notify that the data has changed
    void notifyDataModified();

    signals:
    // A Renderable has been added for display
    void renderableAdded();
    // A Renderable has been removed from display
    void renderableRemoved();
    // A Renderable has been changed (re-grouped etc.)
    void renderableChanged();
    // Viewing style of data represented in the Viewer has changed
    void styleModified();
    // Data has changed
    void dataModified();

    /*
     * Renderable Groups
     */
    protected:
    // Group manager for Renderables
    RenderableGroupManager groupManager_;

    public:
    // Return the group manager for Renderables
    RenderableGroupManager &groupManager();
    // Add Renderable to specified group
    void addRenderableToGroup(Renderable *rend, std::string_view group);

    /*
     * Options
     */
    private:
    // Whether Axes are visible
    bool axesVisible_;
    // Whether to apply clip planes about Axes volume for Renderables
    bool clipToAxesVolume_;

    public:
    // Set whether Axes are visible
    void setAxesVisible(bool visible);
    // Return whether Axes are visible
    bool axesVisible() const;
    // Set whether to apply clip planes about Axes volume for Renderables
    void setClipToAxesVolume(bool clip);
    // Return whether clip planes are applied about Axes volume for Renderables
    bool clipToAxesVolume() const;

    /*
     * Rendering
     */
    protected:
    // Width, height, and aspect ratio of the context
    GLsizei contextWidth_, contextHeight_;
    // Flag to indicate whether we may draw to the context
    bool valid_;
    // Flag indicating if we are currently drawing to this context
    bool drawing_;
    // Font instance for this viewer
    FontInstance fontInstance_;
    // Flag specifying whether we are currently rendering offscreen
    bool renderingOffScreen_;
    // Scaling to use for objects measured in pixel widths / point sizes
    double pixelScaling_;
    // Offscreen context
    QOpenGLContext offscreenContext_;
    // Offscreen surface
    QOffscreenSurface offscreenSurface_;
    // Current offscreen buffer
    QOpenGLFramebufferObject *offscreenBuffer_;

    private:
    // Initialise context widget (when created by Qt)
    void initializeGL();
    // Widget repaint
    void paintGL();
    // Resize function
    void resizeGL(int width, int height);
    // Main rendering function
    void renderGL(int xOffset = 0, int yOffset = 0);
    // Create viewer update stack
    void createUpdateStack(std::vector<BaseViewer *> &updateStack);
    // Perform post-initialisation operations
    virtual void postInitialiseGL();
    // Perform post-resize operations
    virtual void postResizeGL();
    // Setup basic GL properties
    virtual void setupGL();
    // Render 2D overlay content
    virtual void render2DOverlay() = 0;
    // Set scaling to use for objects measured in pixel widths / point sizes
    void setPixelScaling(double scaling);

    protected:
    // Set and enable clip planes suitable for current axis limits and view
    void enableClipping();
    // Disable clip planes
    void disableClipping();

    public:
    // Return the current height of the drawing area
    GLsizei contextHeight() const;
    // Return the current width of the drawing area
    GLsizei contextWidth() const;
    // Check for GL error
    void checkGlError();
    // Refresh widget / scene
    void postRedisplay();
    // Grab current contents of framebuffer
    QPixmap frameBuffer();
    // Render current scene at supplied size
    QPixmap generateImage(int imageWidth, int imageHeight);
    // Copy current view to clipboard as an image
    void copyViewToClipboard(bool checked);

    /*
     * Mouse / Keyboard Input
     */
    protected:
    // Canvas coordinates of mouse down
    Vec3<int> rMouseDown_;
    // Mouse release timer for detection of context menu requests
    QTimer mouseReleaseTimer_;
    // Canvas coordinates of mouse cursor
    Vec3<int> rMouseLast_;
    // Current state of mouse buttons
    Qt::MouseButtons buttonState_;
    // Modifier state on mouse down
    Qt::KeyboardModifiers mouseDownModifiers_;

    private:
    // Mouse press event
    void mousePressEvent(QMouseEvent *event);
    // Mouse release event
    void mouseReleaseEvent(QMouseEvent *event);
    // Mouse move event
    void mouseMoveEvent(QMouseEvent *event);
    // Mouse wheel event
    void wheelEvent(QWheelEvent *event);
    // Mouse double click event
    void mouseDoubleClickEvent(QMouseEvent *event);

    private slots:
    // Key press event
    void keyPressEvent(QKeyEvent *);
    // Key release event
    void keyReleaseEvent(QKeyEvent *);

    protected:
    // Mouse moved
    virtual void mouseMoved(int dx, int dy);
    // Mouse 'wheeled'
    virtual void mouseWheeled(int delta);
    // Mouse double clicked
    virtual void mouseDoubleClicked();
    // Context menu requested
    virtual void contextMenuRequested(QPoint pos);
    // Key pressed
    virtual bool keyPressed(int key);
    // Key released
    virtual bool keyReleased(int key);

    /*
     * Interaction
     */
    private:
    // Clicked coordinates (in Axes frame) in 2D view
    Vec3<double> clicked2DAxesCoordinates_;
    // Current coordinates (in Axes frame) under mouse in 2D view
    Vec3<double> current2DAxesCoordinates_;
    // Whether the viewer is currently being interacted with
    bool interacting_;
    // Current interaction mode
    int interactionMode_;

    protected:
    // Start interaction
    virtual void startInteraction();
    // End interaction
    virtual void endInteraction();
    // Cancel current interaction
    virtual void cancelInteraction();

    public:
    // Set current interaction mode
    void setInteractionMode(int mode);
    // Return current interaction mode
    int interactionMode() const;
    // Return whether the viewer is currently being interacted with
    bool interacting() const;
    // Return text describing current interaction mode
    virtual const QString interactionModeText() const;
    // Return clicked coordinates (in Axes frame) in 2D view
    Vec3<double> clicked2DAxesCoordinates() const;
    // Return current coordinates (in Axes frame) under mouse in 2D view
    Vec3<double> current2DAxesCoordinates() const;
    // Calculate 2D Axes coordinate from screen coordinates
    Vec3<double> screenTo2DAxes(int mouseX, int mouseY);

    signals:
    // Notification that interaction mode has changed
    void interactionModeChanged();

    /*
     * Object Querying
     */
    public:
    // Drawing object type
    enum ViewerObject
    {
        NoObject,
        AxisLineObject,
        AxisTickLabelObject,
        AxisTitleLabelObject,
        GridLineMajorObject,
        GridLineMinorObject,
        RenderableObject,
        CustomObject
    };
    // Return description of viewer object
    static std::string_view viewerObject(ViewerObject vo);

    private:
    // Whether we are currently running an object query
    bool queryingObjects_;
    // Bottom-left coordinates of region to probe for objects at next redraw
    int queryRegionBottom_, queryRegionLeft_;
    // Size of area to sample, starting from bottom-left coordinates
    int queryRegionWidth_, queryRegionHeight_;
    // Colour contents of sample region
    Array<GLfloat> queryRegionR_, queryRegionG_, queryRegionB_;
    // Scaling of generated query image
    double queryImageScale_;
    // Width of query image
    int queryImageWidth_;
    // Height of query image
    int queryImageHeight_;
    // Type of object found at query coordinates
    ViewerObject queryObjectType_;
    // Information describing object at query coordinates
    std::string queryObjectInfo_;
    // Secondary information describing object at query coordinates
    std::string queryObjectSubInfo_;

    private:
    // Generate query image at specified scaling
    void generateQueryImage();

    protected:
    // Update object query, setting supplied information if the sample area has changed significantly
    void updateQuery(BaseViewer::ViewerObject objectType, std::string_view info, std::string_view subInfo = "");

    public:
    // Return the type of object at the specified coordinates
    ViewerObject queryAt(int x, int y);
    // Return info for object at query coordinates
    std::string_view queryObjectInfo() const;
    // Return sub-info for object at query coordinates
    std::string_view queryObjectSubInfo() const;

    /*
     * I/O
     */
    private:
    // Input File Block Keyword Enum
    enum InputBlock
    {
        EndSessionBlock,
        RenderableBlock,
        RenderableGroupBlock,
        ViewBlock,
        nInputBlocks
    };
    // Return enum option info for InputBlock
    static EnumOptions<BaseViewer::InputBlock> inputBlockKeywords();
    // Parse main input blocks through specified parser
    bool parseInputBlocks(LineParser &parser);

    // Axis Block Keyword Enum
    enum AxisKeyword
    {
        AutoScaleKeyword,
        AutoTicksKeyword,
        EndAxisKeyword,
        FirstTickKeyword,
        FractionalPositioningKeyword,
        GridLinesKeyword,
        GridLineMajorStyleKeyword,
        GridLineMinorStyleKeyword,
        InvertKeyword,
        LabelAnchorKeyword,
        LabelOrientationKeyword,
        LimitsKeyword,
        LogarithmicKeyword,
        MinorTicksKeyword,
        NumberFormatKeyword,
        PositionFractionalKeyword,
        PositionRealKeyword,
        StretchKeyword,
        TickDeltaKeyword,
        TickDirectionKeyword,
        TitleKeyword,
        TitleAnchorKeyword,
        TitleOrientationKeyword,
        VisibleAxisKeyword,
        nAxisKeywords
    };
    // Return enum option info for AxisKeyword
    static EnumOptions<BaseViewer::AxisKeyword> axisKeywords();
    // Read AxisBlock keywords
    bool readAxisBlock(LineParser &parser, Axes &axes, int axis, bool strictBlockEnd = true);
    // Write AxisBlock keywords
    bool writeAxisBlock(LineParser &parser, const Axes &axes, int axis) const;

    // Renderable Block Keyword Enum
    enum RenderableKeyword
    {
        ColourAlphaIsGlobalKeyword,
        ColourCustomGradientKeyword,
        ColourGlobalAlphaKeyword,
        ColourHSVGradientEndKeyword,
        ColourHSVGradientStartKeyword,
        ColourRGBGradientEndKeyword,
        ColourRGBGradientStartKeyword,
        ColourSingleKeyword,
        ColourStyleKeyword,
        EndRenderableKeyword,
        EndStyleKeyword,
        GroupKeyword,
        LineStyleKeyword,
        StyleKeyword,
        TransformValuesKeyword,
        VisibleKeyword,
        nRenderableKeywords
    };
    // Return enum option info for RenderableKeyword
    static EnumOptions<BaseViewer::RenderableKeyword> renderableKeywords();
    // Read RenderableBlock keywords
    bool readRenderableBlock(LineParser &parser, Renderable *renderable, bool strictBlockEnd = true);
    // Write RenderableBlock keywords
    bool writeRenderableBlock(LineParser &parser, Renderable *renderable, int indentLevel = 0) const;

    // RenderableGroup Block Keyword Enum
    enum RenderableGroupKeyword
    {

        ColouringStyleKeyword,
        EndRenderableGroupKeyword,
        FixedStockColourKeyword,
        GroupVisibleKeyword,
        StippleKeyword,
        VerticalShiftingKeyword,
        nRenderableGroupKeywords
    };
    // Return enum options for RenderableGroupKeyword
    static EnumOptions<BaseViewer::RenderableGroupKeyword> renderableGroupKeywords();
    // Read RenderableGroup block keywords
    bool readRenderableGroupBlock(LineParser &parser, RenderableGroup *group, bool strictBlockEnd = true);
    // Write RenderableGroup block keywords
    bool writeRenderableGroupBlock(LineParser &parser, RenderableGroup *group, int indentLevel = 0) const;

    // View Block Keyword Enum
    enum ViewKeyword
    {
        AutoFollowTypeKeyword,
        AutoPositionTitlesKeyword,
        AxisBlockKeyword,
        BoundingBoxKeyword,
        BoundingBoxPlaneYKeyword,
        EndViewKeyword,
        FlatLabelsKeyword,
        LabelPointSizeKeyword,
        PerspectiveKeyword,
        RotationXKeyword,
        RotationYKeyword,
        RotationZKeyword,
        TitlePointSizeKeyword,
        TranslationKeyword,
        UseBestFlatViewKeyword,
        VerticalShiftKeyword,
        ViewTypeKeyword,
        nViewKeywords
    };
    // Return enum options for ViewKeyword
    static EnumOptions<BaseViewer::ViewKeyword> viewKeywords();
    // Read ViewBlock keywords
    bool readViewBlock(LineParser &parser, bool strictBlockEnd = true);
    // Write ViewBlock keywords
    bool writeViewBlock(LineParser &parser) const;

    /*
     * Session I/O
     */
    protected:
    // Read custom input block through specified LineParser
    virtual bool readCustomInputBlock(LineParser &parser);
    // Write custom input blocks through specified LineParser
    virtual bool writeCustomInputBlocks(LineParser &parser) const;

    public:
    // Read session through parser specified
    bool readSession(LineParser &parser);
    // Write session through parser specified
    bool writeSession(LineParser &parser) const;
};
