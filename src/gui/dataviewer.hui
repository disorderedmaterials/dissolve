/*
    *** Data Viewer Widget
    *** src/gui/dataviewer.hui
    Copyright T. Youngs 2013-2020

    This file is part of Dissolve.

    Dissolve is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Dissolve is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Dissolve.  If not, see <http://www.gnu.org/licenses/>.
*/

#pragma once

#include "gui/viewer.hui"

// Forward Declarations
class Dissolve;

// Data Viewer
class DataViewer : public BaseViewer
{
    Q_OBJECT

    public:
    // Constructor / Destructor
    DataViewer(QWidget *parent);
    ~DataViewer();

    /*
     * Rendering (BaseViewer virtuals)
     */
    private:
    // Perform post-initialisation operations
    void postInitialiseGL();
    // Perform post-resize operations
    void postResizeGL();
    // Render 2D overlay content
    void render2DOverlay();

    /*
     * Mouse / Keyboard Input (BaseViewer virtuals)
     */
    protected:
    // Mouse moved
    void mouseMoved(int dx, int dy);
    // Mouse 'wheeled'
    void mouseWheeled(int delta);
    // Mouse double clicked
    void mouseDoubleClicked();
    // Context menu requested
    void contextMenuRequested(QPoint pos);
    // Key pressed
    bool keyPressed(int key);
    // Key released
    bool keyReleased(int key);

    signals:
    void currentCoordinateChanged();
    void controlAspectChanged();

    /*
     * Interaction (BaseViewer Virtuals)
     */
    public:
    // Interaction Mode enum
    enum InteractionMode
    {
        DefaultInteraction,
        ZoomToAreaInteraction,
        TranslateViewInteraction,
        RotateViewInteraction,
        ZoomXRangeInteraction,
        nInteractionModes
    };

    protected:
    // Start interaction
    void startInteraction();
    // End interaction
    void endInteraction();
    // Cancel current interaction
    void cancelInteraction();

    public:
    // Return text describing current interaction mode
    const QString interactionModeText() const;
    // Return clicked interaction coordinate on axis
    double clickedInteractionCoordinate();
    // Return current interaction coordinate on axis
    double currentInteractionCoordinate();

    /*
     * Menus
     */
    private:
    // Show general context menu
    void showGeneralContextMenu(QPoint pos);
    // Show renderable context menu
    void showRenderableContextMenu(QPoint pos, Renderable *rend);

    /*
     * Control Flags
     */
    private:
    // Pointer to Dissolve
    Dissolve *dissolve_;
    // Control flags
    int controlFlags_;

    public:
    // Control Flags Enum
    enum ControlFlag
    {
        NoFlags = 0,
        UserCanAddDataFlag = 1,
        UserCanRenameDataFlag = 2,
        UserCanRemoveDataFlag = 4
    };
    // Set pointer to Dissolve
    void setDissolve(Dissolve *dissolve);
    // Set control flags
    void setFlags(int flags);
    // Return whether the specified flag is set
    bool hasFlag(ControlFlag flag) const;
};
