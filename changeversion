#!/bin/bash

# Change the version of the source code to the supplied value

# Day Suffix Function
DaySuffix() {
  case $(date +%-d) in
    1|21|31) echo "st";;
    2|22)    echo "nd";;
    3|23)    echo "rd";;
    *)       echo "th";;
  esac
}

usage() {
  echo "Usage:  $0 <TARGET> [-c] [-p] [-m] [-i] [-r] [-d] [-s X.Y.Z]"
  echo "        -M	Increase major version number (X.0.0)"
  echo "        -m	Increase minor version number (0.X.0)"
  echo "        -p	Increase patch version number (0.0.X)"
  echo "        -s	Set version explicitly to X.Y.Z"
  echo ""
  echo "TARGET is one of:     code - change version numbering in code, and installer and packaging scripts"
  echo "                   release - change release version value on web and date in README.md"
  echo "                   develop - change development version value on web"
  echo ""
  echo "If no options are specified the default behaviour is to print current versions across relevant files."
}

# Check for no args provided
if [ $# == 0 ]
then
  usage
  exit 1
fi

# Get target type and shift to next option
TYPE=$1
shift
if [ "$TYPE" != "code" ] && [ "$TYPE" != "release" ] && [ "$TYPE" != "develop" ]
then
  echo "Invalid target '${TYPE}' given (must be 'code', 'release', 'develop'"
  exit 1
fi

# Get current version number from correct target
if [ "$TYPE" == "code" ]
then
  CURRENT_VERSION=$(grep '#define DISSOLVEVERSION' src/main/version.cpp | sed -e 's/#define DISSOLVEVERSION "\([0-9a-z\.]\+\).*"/\1/g')
elif [ "$TYPE" == "release" ]
then
  CURRENT_VERSION=$(grep 'releaseVersion' web/config.toml | sed -e 's/releaseVersion = "\([0-9\.]*\)"/\1/g')
else
  CURRENT_VERSION=$(grep 'devVersion' web/config.toml | sed -e 's/devVersion = "\([0-9\.]*\)"/\1/g')
fi
PARTS=($(echo $CURRENT_VERSION | tr "." " "))
MAJOR=${PARTS[0]}
MINOR=${PARTS[1]}
PATCH=${PARTS[2]}
CHECK="true"
echo "Current major version (${TYPE}) is : ${MAJOR}"
echo "Current minor version (${TYPE}) is : ${MINOR}"
echo "Current patch version (${TYPE}) is : ${PATCH}"

while getopts ":mMps:" opt
do
  case $opt in
    M) echo "Major version number will be increased from $MAJOR to $((MAJOR+1))"
       MAJOR=$((MAJOR+1))
       MINOR=0
       PATCH=0
       CHECK="false"
       ;;
    m) echo "Minor version number will be increased from $MINOR to $((MINOR+1))"
       MINOR=$((MINOR+1))
       PATCH=0
       CHECK="false"
       ;;
    p) echo "Minor version number will be increased from $PATCH to $((PATCH+1))"
       PATCH=$((PATCH+1))
       CHECK="false"
       ;;
    s) MAJOR=$(echo $OPTARG | cut -f1 -d.)
       MINOR=$(echo $OPTARG | cut -f2 -d.)
       PATCH=$(echo $OPTARG | cut -f3 -d.)
       CHECK="false"
       echo "Version will be set explicitly to MAJOR=$MAJOR MINOR=$MINOR PATCH=$PATCH"
       ;;
   \?) usage
       exit 1
       ;;
    *) echo "Error: Extra operands given."
       usage
       exit 1
       ;;
  esac
done


#########################################
# Code / Installer / Packaging Versions #
#########################################

if [ "$TYPE" = "code" ]
then
  # Program (main/version.h)
  if [ "$CHECK" = "false" ]
  then
    sed -i -e "s/#define DISSOLVEVERSION \"[0-9\.]\+\(.*\)\"/#define DISSOLVEVERSION \"$MAJOR.$MINOR.$PATCH\"\1/g" src/main/version.cpp
    sed -i -e "s/version = \".*\"/version = \"$MAJOR.$MINOR.$PATCH\"/" flake.nix
  fi
  echo -n "         version.cpp (Program Version) : "
  grep '#define DISSOLVEVERSION' src/main/version.cpp | sed -e 's/#define DISSOLVEVERSION "\([0-9a-z\.]\+\).*"/\1/g'
  echo -n "         flake.nix (Program Version) : "
  grep " version =" flake.nix | sed -e "s/\W*version = \"\(.*\)\";/\1/"


  # ./CMakeLists.txt
  if [ "$CHECK" = "false" ]
  then
    sed -i -e "s/set(VERSION_MAJOR \"\([0-9\.]\+\)\")/set(VERSION_MAJOR \"$MAJOR\")/g" -e "s/set(VERSION_MINOR \"\([0-9a-z\.]\+\)\")/set(VERSION_MINOR \"$MINOR\")/g" -e "s/set(VERSION_PATCH \"\([0-9a-z\.]\+\)\")/set(VERSION_PATCH \"$PATCH\")/g" CMakeLists.txt
  fi
  echo -n "      ./CMakeLists.txt (Major Version) : "
  grep 'set(VERSION_MAJOR' ./CMakeLists.txt | sed -e 's/set(VERSION_MAJOR \"\([0-9a-z\.]\+\)\")/\1/g'
  echo -n "                       (Minor Version) : "
  grep 'set(VERSION_MINOR' ./CMakeLists.txt | sed -e 's/set(VERSION_MINOR \"\([0-9a-z\.]\+\)\")/\1/g'
  echo -n "                       (Patch Version) : "
  grep 'set(VERSION_PATCH' ./CMakeLists.txt | sed -e 's/set(VERSION_PATCH \"\([0-9a-z\.]\+\)\")/\1/g'


  # Windows build files
  if [ "$CHECK" = "false" ]
  then
    sed -i -e "s/#define MyAppVersion \"[0-9\.]*\"/#define MyAppVersion \"$MAJOR.$MINOR.$PATCH\"/g" -e "s/OutputBaseFilename=Dissolve-GUI-[0-9\.]*-Win64/OutputBaseFilename=Dissolve-GUI-$MAJOR.$MINOR.$PATCH-Win64/g" ci/windows/dissolve-gui.iss
  fi
  echo -n "    dissolve-gui.iss (Program Version) : "
  grep 'define MyAppVersion' ci/windows/dissolve-gui.iss | sed -e 's/#define MyAppVersion \"\([0-9\.]*\)\"/\1/g'
  echo -n "    dissolve-gui.iss (Output Filename) : "
  grep 'OutputBaseFilename' ci/windows/dissolve-gui.iss | sed -e 's/OutputBaseFilename=Dissolve-GUI-\([0-9\.]*\)-Win64/\1/g'

fi


##########################
# Website Version / Date #
##########################

if [ "$TYPE" = "release" ]
then
  # Documentation (config.toml)
  if [ "$CHECK" = "false" ]
  then
    sed -i -e "s/releaseVersion = \"[0-9\.]*\"/releaseVersion = \"$MAJOR.$MINOR.$PATCH\"/g" web/config.toml

    DAYSUFFIX=$(DaySuffix)
    TODAY=$(date "+%-d${DAYSUFFIX} %B %Y")
    sed -i -e "s/releaseDate = \".*\"/releaseDate = \"${TODAY}\"/g" web/config.toml
  fi
  echo -n "         config.toml (Release Version) : "
  grep 'releaseVersion' web/config.toml | sed -e 's/releaseVersion = "\([0-9\.]*\)"/\1/g'
  echo -n "         config.toml    (Release Date) : "
  grep 'releaseDate' web/config.toml | sed -e 's/releaseDate = "\(.*\)"/\1/g'
fi

if [ "$TYPE" = "develop" ]
then
  # Documentation (config.toml)
  if [ "$CHECK" = "false" ]
  then
    sed -i -e "s/devVersion = \"[0-9\.]*\"/devVersion = \"$MAJOR.$MINOR.$PATCH\"/g" web/config.toml
  fi
  echo -n "         config.toml (Develop Version) : "
  grep 'devVersion' web/config.toml | sed -e 's/devVersion = "\([0-9\.]*\)"/\1/g'
fi


#############
# README.md #
#############

if [ "$TYPE" = "release" ]
then
  # README.md
  if [ "$CHECK" = "false" ]
  then
    DAYSUFFIX=$(DaySuffix)
    TODAY=$(date "+%A %-d${DAYSUFFIX} %B %Y")
    sed -i -e "s/Last Release: [0-9\.]*, \(.*\)_/Last Release: $MAJOR.$MINOR.$PATCH, ${TODAY}_/g" README.md
  fi
  echo -n "           README.md (Release Version) : "
  grep 'Last Release:' README.md | sed -e 's/.*Release: \([0-9\.]*\),.*/\1/g'
  echo -n "           README.md    (Release Date) : "
  grep 'Last Release:' README.md | sed -e "s/.*Release: .*, \(.*\)_/\1/g"
fi

exit 0

