#!/usr/bin/env bash

# Change the version of the source code to the supplied value

# Day Suffix Function
DaySuffix() {
  case $(date +%-d) in
    1|21|31) echo "st";;
    2|22)    echo "nd";;
    3|23)    echo "rd";;
    *)       echo "th";;
  esac
}

usage() {
  echo "Usage:  $0 <TARGET>"
  echo ""
  echo "TARGET is one of:     code - change version numbering in code, and installer and packaging scripts"
  echo "                   release - change release version value on web and date in README.md"
  echo "                   develop - change development version value on web"
  echo ""
  echo "If no options are specified the default behaviour is to print current versions across relevant files."
}

# Check for no args provided
if [ $# == 0 ]
then
  usage
  exit 1
fi

# Get target type and shift to next option
TYPE=$1
shift
if [ "$TYPE" != "code" ] && [ "$TYPE" != "release" ] && [ "$TYPE" != "develop" ]
then
  echo "Invalid target '${TYPE}' given (must be 'code', 'release', 'develop'"
  exit 1
fi

# Get next version number from git-cliff
PARTS=($(git cliff --bumped-version | tr "." " "))
MAJOR=${PARTS[0]}
MINOR=${PARTS[1]}
PATCH=${PARTS[2]}
CHECK="true"

while getopts ":mMps:" opt
do
  case $opt in
   \?) usage
       exit 1
       ;;
    *) echo "Error: Extra operands given."
       usage
       exit 1
       ;;
  esac
done

####################
# Update ChangeLog #
####################

git cliff --bump v1.3.3..HEAD > ChangeLog.md


#########################################
# Code / Installer / Packaging Versions #
#########################################

if [ "$TYPE" = "code" ]
then
  # Program (main/version.h)
  if [ "$CHECK" = "false" ]
  then
    sed -i -e "s/#define DISSOLVEVERSION \"[0-9\.]\+\(.*\)\"/#define DISSOLVEVERSION \"$MAJOR.$MINOR.$PATCH\"\1/g" src/main/version.cpp
  fi
  echo -n "         version.cpp (Program Version) : "
  grep '#define DISSOLVEVERSION' src/main/version.cpp | sed -e 's/#define DISSOLVEVERSION "\([0-9a-z\.]\+\).*"/\1/g'
  
  
  # Flake (flake.nix)
  if [ "$CHECK" = "false" ]
  then
    sed -i -e "s/version = \".*\"/version = \"$MAJOR.$MINOR.$PATCH\"/" flake.nix
  fi
  echo -n "           flake.nix (Program Version) : "
  grep " version =" flake.nix | sed -e "s/\W*version = \"\(.*\)\";/\1/"


  # ./CMakeLists.txt
  if [ "$CHECK" = "false" ]
  then
    sed -i -e "s/set(VERSION_MAJOR \"\([0-9\.]\+\)\")/set(VERSION_MAJOR \"$MAJOR\")/g" -e "s/set(VERSION_MINOR \"\([0-9a-z\.]\+\)\")/set(VERSION_MINOR \"$MINOR\")/g" -e "s/set(VERSION_PATCH \"\([0-9a-z\.]\+\)\")/set(VERSION_PATCH \"$PATCH\")/g" CMakeLists.txt
  fi
  echo -n "      ./CMakeLists.txt (Major Version) : "
  grep 'set(VERSION_MAJOR' ./CMakeLists.txt | sed -e 's/set(VERSION_MAJOR \"\([0-9a-z\.]\+\)\")/\1/g'
  echo -n "                       (Minor Version) : "
  grep 'set(VERSION_MINOR' ./CMakeLists.txt | sed -e 's/set(VERSION_MINOR \"\([0-9a-z\.]\+\)\")/\1/g'
  echo -n "                       (Patch Version) : "
  grep 'set(VERSION_PATCH' ./CMakeLists.txt | sed -e 's/set(VERSION_PATCH \"\([0-9a-z\.]\+\)\")/\1/g'


  # Windows build files
  if [ "$CHECK" = "false" ]
  then
    sed -i -e "s/#define MyAppVersion \"[0-9\.]*\"/#define MyAppVersion \"$MAJOR.$MINOR.$PATCH\"/g" -e "s/OutputBaseFilename=Dissolve-GUI-[0-9\.]*-Win64/OutputBaseFilename=Dissolve-GUI-$MAJOR.$MINOR.$PATCH-Win64/g" ci/windows/dissolve-gui.iss
  fi
  echo -n "    dissolve-gui.iss (Program Version) : "
  grep 'define MyAppVersion' ci/windows/dissolve-gui.iss | sed -e 's/#define MyAppVersion \"\([0-9\.]*\)\"/\1/g'
  echo -n "    dissolve-gui.iss (Output Filename) : "
  grep 'OutputBaseFilename' ci/windows/dissolve-gui.iss | sed -e 's/OutputBaseFilename=Dissolve-GUI-\([0-9\.]*\)-Win64/\1/g'

fi


##########################
# Website Version / Date #
##########################

if [ "$TYPE" = "release" ]
then
  # Website (web/main.toml)
  if [ "$CHECK" = "false" ]
  then
    sed -i -e "s/releaseVersion = \"[0-9\.]*\"/releaseVersion = \"$MAJOR.$MINOR.$PATCH\"/g" web/main.toml

    DAYSUFFIX=$(DaySuffix)
    TODAY=$(date "+%-d${DAYSUFFIX} %B %Y")
    sed -i -e "s/releaseDate = \".*\"/releaseDate = \"${TODAY}\"/g" web/main.toml
  fi
  echo -n "           main.toml (Release Version) : "
  grep 'releaseVersion' web/main.toml | sed -e 's/releaseVersion = "\([0-9\.]*\)"/\1/g'
  echo -n "           main.toml    (Release Date) : "
  grep 'releaseDate' web/main.toml | sed -e 's/releaseDate = "\(.*\)"/\1/g'
  # Website (web/docs.toml)
  if [ "$CHECK" = "false" ]
  then
    sed -i -e "s/releaseVersion = \"[0-9\.]*\"/releaseVersion = \"$MAJOR.$MINOR.$PATCH\"/g" web/docs.toml

    DAYSUFFIX=$(DaySuffix)
    TODAY=$(date "+%-d${DAYSUFFIX} %B %Y")
    sed -i -e "s/releaseDate = \".*\"/releaseDate = \"${TODAY}\"/g" web/docs.toml
  fi
  echo -n "           docs.toml (Release Version) : "
  grep 'releaseVersion' web/docs.toml | sed -e 's/releaseVersion = "\([0-9\.]*\)"/\1/g'
  echo -n "           docs.toml    (Release Date) : "
  grep 'releaseDate' web/docs.toml | sed -e 's/releaseDate = "\(.*\)"/\1/g'
fi

if [ "$TYPE" = "develop" ]
then
  # Website (web/main.toml)
  if [ "$CHECK" = "false" ]
  then
    sed -i -e "s/devVersion = \"[0-9\.]*\"/devVersion = \"$MAJOR.$MINOR.$PATCH\"/g" web/main.toml
  fi
  echo -n "           main.toml (Develop Version) : "
  grep 'devVersion' web/main.toml | sed -e 's/devVersion = "\([0-9\.]*\)"/\1/g'
fi


#############
# README.md #
#############

if [ "$TYPE" = "release" ]
then
  # README.md
  if [ "$CHECK" = "false" ]
  then
    DAYSUFFIX=$(DaySuffix)
    TODAY=$(date "+%A %-d${DAYSUFFIX} %B %Y")
    sed -i -e "s/Last Release: [0-9\.]*, \(.*\)_/Last Release: $MAJOR.$MINOR.$PATCH, ${TODAY}_/g" README.md
  fi
  echo -n "           README.md (Release Version) : "
  grep 'Last Release:' README.md | sed -e 's/.*Release: \([0-9\.]*\),.*/\1/g'
  echo -n "           README.md    (Release Date) : "
  grep 'Last Release:' README.md | sed -e "s/.*Release: .*, \(.*\)_/\1/g"
fi

exit 0

