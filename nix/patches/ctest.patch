diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index d36eee192..fd07c23f4 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -5,7 +5,7 @@ function(dissolve_system_test test_name input_file count)
   message(STATUS "... System test '${test_name}' in directory '${CMAKE_CURRENT_LIST_DIR}'")
   if(PARALLEL)
     foreach(nproc 1 2)
-      set(test_target_executable ${CMAKE_BINARY_DIR}/bin/${target_name})
+      set(test_target_executable bin/${target_name})
       add_test(
         NAME ${CMAKE_CURRENT_LIST_DIR}-${test_name}-${nproc}
         COMMAND ${MPIEXEC_EXECUTABLE} ${MPIEXEC_NUMPROC_FLAG} ${nproc} ${test_target_executable} -n ${count} -x ${input_file} ${ARGN}
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index d36eee192..be6551dd4 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -15,7 +15,7 @@ function(dissolve_system_test test_name input_file count)
       set_property(TEST ${CMAKE_CURRENT_LIST_DIR}-${test_name}-${nproc} PROPERTY PROCESSORS ${nproc})
     endforeach()
   else()
-    set(test_target_executable ${CMAKE_BINARY_DIR}/bin/${target_name})
+    set(test_target_executable ${target_name})
     add_test(
       NAME ${CMAKE_CURRENT_LIST_DIR}-${test_name}
       COMMAND ${test_target_executable} -n ${count} -x ${input_file} ${ARGN}
diff --git a/unit/gui/speciestab.cpp b/unit/gui/speciestab.cpp
index 7e050a639..a1050155e 100644
--- a/unit/gui/speciestab.cpp
+++ b/unit/gui/speciestab.cpp
@@ -51,15 +51,15 @@ TEST_F(SpeciesTabTest, Atoms)
         EXPECT_EQ(atom.data(atom.index(0, 1), role).toString().toStdString(), "CA");
         EXPECT_DOUBLE_EQ(atom.data(atom.index(0, 2), role).toDouble(), -1.399);
         EXPECT_DOUBLE_EQ(atom.data(atom.index(0, 3), role).toDouble(), 0.1600);
-        EXPECT_DOUBLE_EQ(atom.data(atom.index(0, 4), role).toDouble(), 0.000);
+        EXPECT_DOUBLE_EQ(atom.data(atom.index(0, 4), role).toDouble(), 0);
         EXPECT_DOUBLE_EQ(atom.data(atom.index(0, 5), role).toDouble(), -0.115);
 
         // Test Hydrogen Atom
         EXPECT_EQ(atom.data(atom.index(6, 0), role).toString().toStdString(), "Hydrogen");
         EXPECT_EQ(atom.data(atom.index(6, 1), role).toString().toStdString(), "HA");
         EXPECT_DOUBLE_EQ(atom.data(atom.index(6, 2), role).toDouble(), 1.483);
         EXPECT_DOUBLE_EQ(atom.data(atom.index(6, 3), role).toDouble(), 2.001);
-        EXPECT_DOUBLE_EQ(atom.data(atom.index(6, 4), role).toDouble(), 0.000);
+        EXPECT_DOUBLE_EQ(atom.data(atom.index(6, 4), role).toDouble(), 0);
         EXPECT_DOUBLE_EQ(atom.data(atom.index(6, 5), role).toDouble(), 0.115);
     }
 
@@ -68,9 +68,9 @@ TEST_F(SpeciesTabTest, Atoms)
     EXPECT_TRUE(atom.setData(atom.index(6, 1), "HA"));
     EXPECT_FALSE(atom.setData(atom.index(6, 1), "Unreal"));
     EXPECT_TRUE(atom.setData(atom.index(6, 2), "CA"));
-    EXPECT_TRUE(atom.setData(atom.index(6, 3), 3.0));
-    EXPECT_TRUE(atom.setData(atom.index(6, 4), 4.0));
-    EXPECT_TRUE(atom.setData(atom.index(6, 5), 5.0));
+    EXPECT_TRUE(atom.setData(atom.index(6, 3), 3));
+    EXPECT_TRUE(atom.setData(atom.index(6, 4), 4));
+    EXPECT_TRUE(atom.setData(atom.index(6, 5), 5));
     for (auto i = 3; i < 6; ++i)
         EXPECT_EQ(atom.data(atom.index(6, i)).toDouble(), i);
 }
@@ -108,8 +108,8 @@ TEST_F(SpeciesTabTest, Bonds)
     EXPECT_FALSE(bond.setData(bond.index(3, 2), "Undefined"));
     EXPECT_TRUE(bond.setData(bond.index(3, 2), "Harmonic"));
 
-    EXPECT_TRUE(bond.setData(bond.index(3, 3), "4.0, 5.0"));
-    EXPECT_EQ(bond.data(bond.index(3, 3)).toString().toStdString(), "4.0, 5.0");
+    EXPECT_TRUE(bond.setData(bond.index(3, 3), "4, 5"));
+    EXPECT_EQ(bond.data(bond.index(3, 3)).toString().toStdString(), "4, 5");
 
     EXPECT_TRUE(bond.setData(bond.index(3, 2), "@CA-CA"));
     EXPECT_EQ(bond.data(bond.index(3, 3)).toString().toStdString(), "3924.59, 1.4");
@@ -136,7 +136,7 @@ TEST_F(SpeciesTabTest, Angles)
         EXPECT_EQ(angle.data(angle.index(3, 1), role).toInt(), 5);
         EXPECT_EQ(angle.data(angle.index(3, 2), role).toInt(), 6);
         EXPECT_EQ(angle.data(angle.index(3, 3), role).toString().toStdString(), "@CA-CA-CA");
-        EXPECT_EQ(angle.data(angle.index(3, 4), role).toString().toStdString(), "527.184, 120.0");
+        EXPECT_EQ(angle.data(angle.index(3, 4), role).toString().toStdString(), "527.184, 120");
     }
 
     // Mutate angle
@@ -148,11 +148,11 @@ TEST_F(SpeciesTabTest, Angles)
     EXPECT_FALSE(angle.setData(angle.index(3, 3), "Undefined"));
     EXPECT_TRUE(angle.setData(angle.index(3, 3), "Harmonic"));
 
-    EXPECT_TRUE(angle.setData(angle.index(3, 4), "4.0, 5.0"));
-    EXPECT_EQ(angle.data(angle.index(3, 4)).toString().toStdString(), "4.0, 5.0");
+    EXPECT_TRUE(angle.setData(angle.index(3, 4), "4, 5"));
+    EXPECT_EQ(angle.data(angle.index(3, 4)).toString().toStdString(), "4, 5");
 
     EXPECT_TRUE(angle.setData(angle.index(3, 3), "@CA-CA-CA"));
-    EXPECT_EQ(angle.data(angle.index(3, 4)).toString().toStdString(), "527.184, 120.0");
+    EXPECT_EQ(angle.data(angle.index(3, 4)).toString().toStdString(), "527.184, 120");
 }
 
 TEST_F(SpeciesTabTest, Torsions)
@@ -177,7 +177,7 @@ TEST_F(SpeciesTabTest, Torsions)
         EXPECT_EQ(torsion.data(torsion.index(3, 2), role).toInt(), 2);
         EXPECT_EQ(torsion.data(torsion.index(3, 3), role).toInt(), 3);
         EXPECT_EQ(torsion.data(torsion.index(3, 4), role).toString().toStdString(), "@CA-CA-CA-CA");
-        EXPECT_EQ(torsion.data(torsion.index(3, 5), role).toString().toStdString(), "0.0, 30.334, 0.0");
+        EXPECT_EQ(torsion.data(torsion.index(3, 5), role).toString().toStdString(), "0, 30.334, 0");
     }
 
     // Mutate torsion
@@ -186,19 +186,19 @@ TEST_F(SpeciesTabTest, Torsions)
     EXPECT_FALSE(torsion.setData(torsion.index(3, 2), 7));
     EXPECT_FALSE(torsion.setData(torsion.index(3, 3), 8));
 
-    EXPECT_FALSE(torsion.setData(torsion.index(3, 5), "4.0, 5.0, 6.0"));
+    EXPECT_FALSE(torsion.setData(torsion.index(3, 5), "4, 5, 6"));
 
     EXPECT_FALSE(torsion.setData(torsion.index(3, 4), "Undefined"));
     EXPECT_TRUE(torsion.setData(torsion.index(3, 4), "Cos3"));
 
-    EXPECT_FALSE(torsion.setData(torsion.index(3, 5), "4.0, 5.0"));
-    EXPECT_TRUE(torsion.setData(torsion.index(3, 5), "4.0, 5.0, 6.0"));
-    EXPECT_EQ(torsion.data(torsion.index(3, 5)).toString().toStdString(), "4.0, 5.0, 6.0");
+    EXPECT_FALSE(torsion.setData(torsion.index(3, 5), "4, 5"));
+    EXPECT_TRUE(torsion.setData(torsion.index(3, 5), "4, 5, 6"));
+    EXPECT_EQ(torsion.data(torsion.index(3, 5)).toString().toStdString(), "4, 5, 6");
 
     EXPECT_FALSE(torsion.setData(torsion.index(3, 8), 8));
     EXPECT_EQ(torsion.data(torsion.index(3, 8)).toDouble(), 0);
     EXPECT_TRUE(torsion.setData(torsion.index(3, 4), "@CA-CA-CA-CA"));
-    EXPECT_EQ(torsion.data(torsion.index(3, 5)).toString().toStdString(), "0.0, 30.334, 0.0");
+    EXPECT_EQ(torsion.data(torsion.index(3, 5)).toString().toStdString(), "0, 30.334, 0");
 }
 
 TEST_F(SpeciesTabTest, Impropers)
@@ -223,7 +223,7 @@ TEST_F(SpeciesTabTest, Impropers)
         EXPECT_EQ(improper.data(improper.index(3, 2), role).toInt(), 5);
         EXPECT_EQ(improper.data(improper.index(3, 3), role).toInt(), 9);
         EXPECT_EQ(improper.data(improper.index(3, 4), role).toString().toStdString(), "@impgeneral");
-        EXPECT_EQ(improper.data(improper.index(3, 5), role).toString().toStdString(), "4.606, 2.0, 180.0, 1.0");
+        EXPECT_EQ(improper.data(improper.index(3, 5), role).toString().toStdString(), "4.606, 2, 180, 1");
     }
 
     // Mutate improper
@@ -232,18 +232,18 @@ TEST_F(SpeciesTabTest, Impropers)
     EXPECT_FALSE(improper.setData(improper.index(3, 2), 7));
     EXPECT_FALSE(improper.setData(improper.index(3, 3), 8));
 
-    EXPECT_FALSE(improper.setData(improper.index(3, 5), "3.0, 4.0, 5.0, 6.0"));
+    EXPECT_FALSE(improper.setData(improper.index(3, 5), "3, 4, 5, 6"));
 
     EXPECT_FALSE(improper.setData(improper.index(3, 4), "Undefined"));
     EXPECT_TRUE(improper.setData(improper.index(3, 4), "Cos3"));
 
-    EXPECT_FALSE(improper.setData(improper.index(3, 5), "3.0, 4.0, 5.0"));
-    EXPECT_FALSE(improper.setData(improper.index(3, 5), "3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 8.0"));
-    EXPECT_TRUE(improper.setData(improper.index(3, 5), "3.0, 4.0, 5.0, 6.0"));
-    EXPECT_EQ(improper.data(improper.index(3, 5)).toString().toStdString(), "3.0, 4.0, 5.0, 6.0");
+    EXPECT_FALSE(improper.setData(improper.index(3, 5), "3, 4, 5"));
+    EXPECT_FALSE(improper.setData(improper.index(3, 5), "3, 4, 5, 6, 7, 8, 8"));
+    EXPECT_TRUE(improper.setData(improper.index(3, 5), "3, 4, 5, 6"));
+    EXPECT_EQ(improper.data(improper.index(3, 5)).toString().toStdString(), "3, 4, 5, 6");
 
     EXPECT_TRUE(improper.setData(improper.index(3, 4), "@impgeneral"));
-    EXPECT_EQ(improper.data(improper.index(3, 5)).toString().toStdString(), "4.606, 2.0, 180.0, 1.0");
+    EXPECT_EQ(improper.data(improper.index(3, 5)).toString().toStdString(), "4.606, 2, 180, 1");
 }
 
 TEST_F(SpeciesTabTest, Isotopologues)
diff --git a/unit/gui/masterTerms.cpp b/unit/gui/masterTerms.cpp
index 8418f6571..5db8f27cf 100644
--- a/unit/gui/masterTerms.cpp
+++ b/unit/gui/masterTerms.cpp
@@ -60,7 +60,7 @@ TEST_F(MasterTermsTableModelTest, MasterBonds)
     EXPECT_EQ(model.data(model.index(0, 1)).toString().toStdString(), "EPSR");
 
     EXPECT_TRUE(model.setData(model.index(0, 2), "3, 4"));
-    EXPECT_EQ(model.data(model.index(0, 2)).toString().toStdString(), "3.0, 4.0");
+    EXPECT_EQ(model.data(model.index(0, 2)).toString().toStdString(), "3, 4");
 }
 TEST_F(MasterTermsTableModelTest, MasterAngles)
 {
@@ -86,8 +86,8 @@ TEST_F(MasterTermsTableModelTest, MasterAngles)
         EXPECT_EQ(model.data(model.index(1, 0), role).toString().toStdString(), "CA-CA-HA");
         EXPECT_EQ(model.data(model.index(0, 1), role).toString().toStdString(), "Harmonic");
         EXPECT_EQ(model.data(model.index(1, 1), role).toString().toStdString(), "Harmonic");
-        EXPECT_EQ(model.data(model.index(0, 2), role).toString().toStdString(), "527.184, 120.0");
-        EXPECT_EQ(model.data(model.index(1, 2), role).toString().toStdString(), "292.88, 120.0");
+        EXPECT_EQ(model.data(model.index(0, 2), role).toString().toStdString(), "527.184, 120");
+        EXPECT_EQ(model.data(model.index(1, 2), role).toString().toStdString(), "292.88, 120");
     }
 
     // Mutate table contents
@@ -101,7 +101,7 @@ TEST_F(MasterTermsTableModelTest, MasterAngles)
     EXPECT_EQ(model.data(model.index(0, 1)).toString().toStdString(), "Cos");
 
     EXPECT_TRUE(model.setData(model.index(0, 2), "3, 4"));
-    EXPECT_EQ(model.data(model.index(0, 2)).toString().toStdString(), "3.0, 4.0");
+    EXPECT_EQ(model.data(model.index(0, 2)).toString().toStdString(), "3, 4");
 }
 TEST_F(MasterTermsTableModelTest, MasterTorsions)
 {
@@ -129,9 +129,9 @@ TEST_F(MasterTermsTableModelTest, MasterTorsions)
         EXPECT_EQ(model.data(model.index(0, 1), role).toString().toStdString(), "Cos3");
         EXPECT_EQ(model.data(model.index(1, 1), role).toString().toStdString(), "Cos3");
         EXPECT_EQ(model.data(model.index(2, 1), role).toString().toStdString(), "Cos3");
-        EXPECT_EQ(model.data(model.index(0, 2), role).toString().toStdString(), "0.0, 30.334, 0.0");
-        EXPECT_EQ(model.data(model.index(1, 2), role).toString().toStdString(), "0.0, 30.334, 0.0");
-        EXPECT_EQ(model.data(model.index(2, 2), role).toString().toStdString(), "0.0, 30.334, 0.0");
+        EXPECT_EQ(model.data(model.index(0, 2), role).toString().toStdString(), "0, 30.334, 0");
+        EXPECT_EQ(model.data(model.index(1, 2), role).toString().toStdString(), "0, 30.334, 0");
+        EXPECT_EQ(model.data(model.index(2, 2), role).toString().toStdString(), "0, 30.334, 0");
     }
 
     // Mutate table contents
@@ -145,7 +145,7 @@ TEST_F(MasterTermsTableModelTest, MasterTorsions)
     EXPECT_EQ(model.data(model.index(0, 1)).toString().toStdString(), "Cos3C");
 
     EXPECT_TRUE(model.setData(model.index(0, 2), "3, 4, 5"));
-    EXPECT_EQ(model.data(model.index(0, 2)).toString().toStdString(), "3.0, 4.0, 5.0");
+    EXPECT_EQ(model.data(model.index(0, 2)).toString().toStdString(), "3, 4, 5");
 }
 
-} // namespace UnitTest
\ No newline at end of file
+} // namespace UnitTest
diff --git a/unit/gui/forcefieldTab.cpp b/unit/gui/forcefieldTab.cpp
index 9f3942d16..68b429e7b 100644
--- a/unit/gui/forcefieldTab.cpp
+++ b/unit/gui/forcefieldTab.cpp
@@ -64,7 +64,7 @@ TEST_F(ForcefieldTabTest, PairPotentials)
     EXPECT_DOUBLE_EQ(pairs.data(pairs.index(0, 3)).toDouble(), 2);
     EXPECT_TRUE(pairs.setData(pairs.index(0, 4), -3));
     EXPECT_DOUBLE_EQ(pairs.data(pairs.index(0, 4)).toDouble(), -3);
-    EXPECT_TRUE(pairs.setData(pairs.index(0, 5), "4.0, -5.0"));
-    EXPECT_EQ(pairs.data(pairs.index(0, 5)).toString().toStdString(), "4.0, -5.0");
+    EXPECT_TRUE(pairs.setData(pairs.index(0, 5), "4, -5"));
+    EXPECT_EQ(pairs.data(pairs.index(0, 5)).toString().toStdString(), "4, -5");
 }
 } // namespace UnitTest
