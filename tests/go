#!/bin/bash -l

# Run all system tests, or those explictly specified on the command line

NFAILED=0
EXITONFAIL="TRUE"
SERIALBINARY=../src/dissolve
PARALLELBINARY=../src/dissolve-mpi
TESTS=""
NTESTS="0"
COMMONARGS="-x -i -n 1"

while getopts "as:p:" op
do
	case $op in
		a)
			EXITONFAIL="FALSE"
			echo "Run all tests, regardless of the success or failure of each test."
			;;
		s)
			SERIALBINARY=${OPTARG}
			echo "Serial binary to use is '${SERIALBINARY}'"
			;;
		p)
			PARALLELBINARY=${OPTARG}
			echo "Parallel binary to use is '${PARALLELBINARY}'"
			;;
		\?)
			echo "Error: Unrecognised switch '$op'"
			exit 1
			;;
		*)
			echo "Error: Extra operands given."
			echo "Usage: $0 [-a] [-s <serial binary>] [-p <parallel binary>]"
			exit 1
			;;
	esac
done

# Check binaries
if [ ! -e $SERIALBINARY ]
then
	echo "Couldn't find serial binary, so no serial tests will be performed."
	SERIALBINARY="NO"
fi
if [ ! -e $PARALLELBINARY ]
then
	echo "Couldn't find parallel binary, so no parallel tests will be performed."
	PARALLELBINARY="NO"
fi

if [ "$SERIALBINARY" == "NO" ] && [ "$PARALLELBINARY" == "NO" ]
then
	echo "No binaries available to perform tests!"
	exit 1
fi

# Do we have a parallel exe?
PARALLEL="FALSE"
PROCS=""
if [ "$SERIALBINARY" != "NO" ]
then
	echo "Serial version available - serial tests will be performed."
	PROCS="S"
fi
if [ "$PARALLELBINARY" != "NO" ]
then
	PARALLEL="TRUE"
	PROCS="$PROCS 1 2 3 4"
	echo "Parallel version available - checks will be performed over ($PROCS) processes."
fi

# Assemble list of tests supplied, or construct list of all tests
shift $(expr $OPTIND - 1)
while test $# -gt 0
do
	if [ ! -d $1 ]
	then
		echo "Error: No such test '$1' exists, or it is not a directory."
		exit 1
	fi
	TEST[NTESTS]=$1
	((NTESTS++))
	shift
done

if [ "$NTESTS" -eq "0" ]
then
	for test in [a-z]*
	do
		if [ -d $test ]
		then
			TEST[NTESTS]=$test
			((NTESTS++))
		fi
	done
fi
echo "There are $NTESTS tests to run: ${TEST[@]}"

for test in ${TEST[@]}
do
	# Strip trailing directory delimiter if present
	test=`echo $test | sed -e 's/\(.*\)\//\1/g'`
	echo "Test directory: "$test

	# Descend into test directory, and print out first two lines from README (containing description of test)
	cd $test
	if [ -e README ]
	then
	  head -n2 README
	else
	  echo "<<< No README file in this directory >>>"
	fi

	# Check for the presence of flag files
	TARGETPROCS=$PROCS
	if [ -e NOPARALLEL ]
	then
		if [ "$SERIALBINARY" != "NO" ]
		then
			echo "NOPARALLEL found - test will be performed in serial mode only."
			TARGETPROCS="S"
		else
			echo "NOPARALLEL found, but no serial binary available. Test will be skipped..."

			# Move up to base directory and continue
			cd ../
			continue
		fi
	fi

	# Were arguments provided for all tests in this directory?
	if [ -e global.args ]
	then
		BASEARGS="$(<global.args)"
		echo "Global arguments file provided - common args for all tests are now: $BASEARGS"
	else
		BASEARGS="$COMMONARGS"
	fi

	
	# Loop over all input files (*.txt)
	for input in *.txt
	do
		# Copy base arguments
		ARGS=$BASEARGS

		# Are there specific arguments for the test?
		if [ -e ${input%.txt}.args ]
		then
			ARGS="$(<${input%.txt}.args)"
		fi

		for nprocs in $TARGETPROCS
		do
			# Set output filename path
			if [ "$nprocs" = "S" ]
			then
				output=../${test}.${input%.txt}.out
				echo -e "\nRunning test \"${input}\" (serial)..."
				echo "Arguments are: $ARGS"
				../$SERIALBINARY $ARGS $input > $output
			else
				output=../${test}.${input%.txt}.${nprocs}.out
				echo -e "\nRunning test \"${input}\" (${nprocs} processes)..."
				echo "Arguments are: $ARGS"
				mpirun -np $nprocs ../$PARALLELBINARY $ARGS $input -r $output > $output
			fi

			if [ "$?" -eq "0" ]
			then
				echo "Success!"
			else
				echo "*****************"
				echo "*  TEST FAILED  *"
				echo "*****************"
				echo ""
				echo "Obvious errors (if any) from output file '$output' are:"
				echo ""
				grep "ERROR\|NOT OK" $output

				NFAILED=$(( NFAILED+1 ))

				# Exit early?
				if [ "$EXITONFAIL" = "TRUE" ]
				then
					exit 1
				fi
			fi

		done
	done

	# Done, so move up to base test directory
	cd ../
	echo ""
done

# Did we have any failures

if [ "$NFAILED" -gt "0" ]
then
	echo -e "\nOne or more tests failed.\n"
	exit 1
fi

exit 0
