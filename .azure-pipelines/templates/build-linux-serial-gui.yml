parameters:
  - name: extraflags
    default: ''
  - name: parallel
    type: boolean
    default: false
  - name: mac
    type: boolean
    default: false

steps:
  - bash: |
      set -ex
      sudo install -d -m755 -o $(id -u) -g $(id -g) /nix
      curl -L https://nixos.org/nix/install | sh
      source ~/.nix-profile/etc/profile.d/nix.sh
      nix-channel --update
    displayName: 'Install Prerequisites'
    condition: not(${{parameters.mac}})
  - bash: |
      set -ex
      sh <(curl -L https://nixos.org/nix/install) --darwin-use-unencrypted-nix-store-volume
      source ~/.nix-profile/etc/profile.d/nix.sh
      nix-channel --update
    displayName: 'Install Mac Prerequisites'
    condition: ${{parameters.mac}}
  - bash: |
      set -ex
      source ~/.nix-profile/etc/profile.d/nix.sh
      nix-env -iA cachix -f https://cachix.org/api/v1/install
      cachix use rprospero
      cd nix
      nix-build dissolve.nix --arg parallel $[ lower(parameters["parallel"])]
      cd ..
      nix-instantiate nix/dissolve.nix --arg parallel true | xargs nix-store -r | xargs nix-store -q --references | xargs tar czf tests/nix.tar.gz
      # tar czf tests/nix.tar.gz /nix/store/*
      cp nix/result/bin/dissolve* tests/
    displayName: 'Build'
    condition: ${{parameters.parallel}}
  - bash: |
      set -ex
      source ~/.nix-profile/etc/profile.d/nix.sh
      nix-env -iA cachix -f https://cachix.org/api/v1/install
      cachix use rprospero
      cd nix
      nix-build dissolve.nix --arg parallel $[ lower(parameters["parallel"])]
      cd ..
      nix-instantiate nix/dissolve.nix --arg parallel false | xargs nix-store -r | xargs nix-store -q --references | xargs tar czf tests/nix.tar.gz
      # tar czf tests/nix.tar.gz /nix/store/*
      # cp nix/result/bin/dissolve* tests/
    displayName: 'Build'
    condition: not(${{parameters.parallel}})
