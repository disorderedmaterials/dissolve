parameters:
  - name: package
    default : "dissolve-gui"
  - name: export
    default : false
  - name: docker
    default: "docker-gui"


steps:
  - bash: |
      set -ex
      # -- General
      sudo apt-get update -q
      sudo apt-get install curl gpg jq
      curl -o install-nix-2.3.16 https://releases.nixos.org/nix/nix-2.3.16/install
      curl -o install-nix-2.3.16.asc https://releases.nixos.org/nix/nix-2.3.16/install.asc
      gpg2 --keyserver hkps://keyserver.ubuntu.com --recv-keys B541D55301270E0BCF15CA5D8170B4726D7198DE
      gpg2 --verify ./install-nix-2.3.16.asc
      sh ./install-nix-2.3.16
    displayName: 'Install nix'
  - bash: |
      set -ex
      # -- General
      source ~/.nix-profile/etc/profile.d/nix.sh
      mkdir -p ~/.config/nix/
      nix-env -iA nixpkgs.nixUnstable
      echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf
    displayName: 'Install Flake Support'
  - bash: |
      set -ex
      source ~/.nix-profile/etc/profile.d/nix.sh
      nix-env -iA cachix -f https://cachix.org/api/v1/install
      cachix use dissolve-nix
    displayName: 'Install Cachix'
  - bash: |
      set -ex
      source ~/.nix-profile/etc/profile.d/nix.sh
      nix build -L .#${{ parameters.package }} | jq -r '.[].outputs | to_entries[].value' | cachix push dissolve-nix
    env:
      CACHIX_AUTH_TOKEN: $(CACHIX_AUTH_TOKEN)
    displayName: 'Build'
  - bash: |
      set -ex
      source ~/.nix-profile/etc/profile.d/nix.sh
      cachix use dissolve-nix
      nix bundle -L .#${{ parameters.package }}
      mkdir -p packages
      cp ${{ parameters.package }} packages
      nix build .#{{ parameters.docker }}
      mkdir -p docker
      cp result docker
    env:
      CACHIX_AUTH_TOKEN: $(CACHIX_AUTH_TOKEN)
    displayName: 'Package'
    condition: parameters.export
